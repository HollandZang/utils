package arithmetic;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Set;
import java.util.Stack;
import java.util.stream.Collectors;

/**
 * 窝点怠工
 */
public class WDDG {
    /// <summary>
    /// 地球半径 单位 米
    /// </summary>
    private static final double EARTH_RADIUS = 6378137;

    /// <summary>
    /// 计算两点位置的距离，返回两点的距离，单位 米
    /// 该公式为GOOGLE提供，误差小于0.2米
    /// </summary>
    /// <param name="lat1">第一点纬度</param>
    /// <param name="lng1">第一点经度</param>
    /// <param name="lat2">第二点纬度</param>
    /// <param name="lng2">第二点经度</param>
    /// <returns></returns>
    public static double GetDistance(double lat1, double lng1, double lat2, double lng2) {
        double radLat1 = Rad(lat1);
        double radLng1 = Rad(lng1);
        double radLat2 = Rad(lat2);
        double radLng2 = Rad(lng2);
        double a = radLat1 - radLat2;
        double b = radLng1 - radLng2;
        double result = 2 * Math.asin(Math.sqrt(Math.pow(Math.sin(a / 2), 2) + Math.cos(radLat1) * Math.cos(radLat2) * Math.pow(Math.sin(b / 2), 2))) * EARTH_RADIUS;
        return result;
    }

    public static double GetDistance(Graham.Node t1, Graham.Node t2) {
        return GetDistance(t1.y.doubleValue(), t1.x.doubleValue(), t2.y.doubleValue(), t2.x.doubleValue());
    }

    /// <summary>
    /// 经纬度转化成弧度
    /// </summary>
    /// <param name="d"></param>
    /// <returns></returns>
    private static double Rad(double d) {
        return (double) d * Math.PI / 180d;
    }

    /**
     * 坐标点测试数据
     */
    public static void main(String[] args) {
        final String[] dataList = metadata.split("\n");
        final Set<Graham.Node> nodeList = Arrays.stream(dataList)
                .map(s -> {
                    final String[] split = s.split("\t");
                    return new Graham.Node(split[1], split[2]);
                })
                .collect(Collectors.toSet());

        final Stack<Graham.Node> stack = Graham.getConvexHell(new ArrayList<>(nodeList));
        System.out.println("找出来的凸包顶点");
        stack.stream().forEach(System.out::println);
        System.out.println("生成部分百度地图js代码");
        int i = 0;
        for (Graham.Node node : stack) {
            System.out.println("var marker" + i + " = new BMapGL.Marker(new BMapGL.Point(" + node.x.doubleValue() + ", " + node.y.doubleValue() + "));");
            System.out.println("map.addOverlay(marker" + i + ");");
            i++;
        }
        System.out.println("\n");

        final Graham.Node[] nodes = Graham.RotateCalipers.getConvexPolygonDiameter_MC_Node(stack);

        final double v = GetDistance(nodes[0], nodes[1]);
        System.out.println("计算两个坐标点的实际距离");
        System.out.println(v);

        System.out.println("生成部分百度地图js代码");
        Arrays.stream(nodes)
                .forEach(node -> {
                    System.out.printf("map.centerAndZoom(new BMapGL.Point(%f, %f), 15);\n", node.x.doubleValue(), node.y.doubleValue());
                    System.out.printf("%f,%f\n", node.x.doubleValue(), node.y.doubleValue());
                });
        i = 0;
        for (Graham.Node node : nodeList) {
            System.out.println("var marker" + i + " = new BMapGL.Marker(new BMapGL.Point(" + node.x.doubleValue() + ", " + node.y.doubleValue() + "));");
            System.out.println("map.addOverlay(marker" + i + ");");
            i++;
        }
    }

    final static String metadata = "1\t104.112031691484\t30.6521543457975\n" +
            "2\t104.112031691484\t30.6521543457975\n" +
            "3\t104.112031691484\t30.6521543457975\n" +
            "4\t104.112016500081\t30.6521694694072\n" +
            "5\t104.112016500081\t30.6521694694072\n" +
            "6\t104.112014932379\t30.6520702174794\n" +
            "7\t104.112014932379\t30.6520702174794\n" +
            "8\t104.112014932379\t30.6520702174794\n" +
            "9\t104.112028334161\t30.6520929870339\n" +
            "10\t104.112028334161\t30.6520929870339\n" +
            "11\t104.112028334161\t30.6520929870339\n" +
            "12\t104.112028334161\t30.6520929870339\n" +
            "13\t104.112040160401\t30.6520973901914\n" +
            "14\t104.112040160401\t30.6520973901914\n" +
            "15\t104.112040160401\t30.6520973901914\n" +
            "16\t104.112061359259\t30.6521346123437\n" +
            "17\t104.112061359259\t30.6521346123437\n" +
            "18\t104.112061359259\t30.6521346123437\n" +
            "19\t104.112061359259\t30.6521346123437\n" +
            "20\t104.112072109573\t30.6521247852582\n" +
            "21\t104.112072109573\t30.6521247852582\n" +
            "22\t104.112072109573\t30.6521247852582\n" +
            "23\t104.112072109573\t30.6521247852582\n" +
            "24\t104.112072109573\t30.6521247852582\n" +
            "25\t104.112102991045\t30.6520806609656\n" +
            "26\t104.112102991045\t30.6520806609656\n" +
            "27\t104.112102991045\t30.6520806609656\n" +
            "28\t104.112102991045\t30.6520806609656\n" +
            "29\t104.112102991045\t30.6520806609656\n" +
            "30\t104.112102991045\t30.6520806609656\n" +
            "31\t104.11212773518\t30.6520917905295\n" +
            "32\t104.11212773518\t30.6520917905295\n" +
            "33\t104.11212773518\t30.6520917905295\n" +
            "34\t104.11212773518\t30.6520917905295\n" +
            "35\t104.11212773518\t30.6520917905295\n" +
            "36\t104.11212773518\t30.6520917905295\n" +
            "37\t104.11212773518\t30.6520917905295\n" +
            "38\t104.11212773518\t30.6520917905295\n" +
            "39\t104.11212773518\t30.6520917905295\n" +
            "40\t104.11212773518\t30.6520917905295\n" +
            "41\t104.11215885\t30.652084291\n" +
            "42\t104.11215885\t30.652084291\n" +
            "43\t104.11215885\t30.652084291\n" +
            "44\t104.11215885\t30.652084291\n" +
            "45\t104.11215885\t30.652084291\n" +
            "46\t104.11215885\t30.652084291\n" +
            "47\t104.11215885\t30.652084291\n" +
            "48\t104.11215885\t30.652084291\n" +
            "49\t104.11215885\t30.652084291\n" +
            "50\t104.111671388028\t30.6512031641472\n" +
            "51\t104.111671388028\t30.6512031641472\n" +
            "52\t104.111671388028\t30.6512031641472\n" +
            "53\t104.111671388028\t30.6512031641472\n" +
            "54\t104.111671388028\t30.6512031641472\n" +
            "55\t104.112142893334\t30.6520412250356\n" +
            "56\t104.112142893334\t30.6520412250356\n" +
            "57\t104.112142893334\t30.6520412250356\n" +
            "58\t104.112142893334\t30.6520412250356\n" +
            "59\t104.112142893334\t30.6520412250356\n" +
            "60\t104.112142893334\t30.6520412250356\n" +
            "61\t104.112142893334\t30.6520412250356\n" +
            "62\t104.112142893334\t30.6520412250356\n" +
            "63\t104.112142893334\t30.6520412250356\n" +
            "64\t104.112142893334\t30.6520412250356\n" +
            "65\t104.112142893334\t30.6520412250356\n" +
            "66\t104.112142893334\t30.6520412250356\n" +
            "67\t104.112142893334\t30.6520412250356\n" +
            "68\t104.112142893334\t30.6520412250356\n" +
            "69\t104.112142893334\t30.6520412250356\n" +
            "70\t104.112142893334\t30.6520412250356\n" +
            "71\t104.112142893334\t30.6520412250356\n" +
            "72\t104.112142893334\t30.6520412250356\n" +
            "73\t104.112142893334\t30.6520412250356\n" +
            "74\t104.112142893334\t30.6520412250356\n" +
            "75\t104.112142893334\t30.6520412250356\n" +
            "76\t104.112142893334\t30.6520412250356\n" +
            "77\t104.112142893334\t30.6520412250356\n" +
            "78\t104.112142893334\t30.6520412250356\n" +
            "79\t104.112142893334\t30.6520412250356\n" +
            "80\t104.112142893334\t30.6520412250356\n" +
            "81\t104.112142893334\t30.6520412250356\n" +
            "82\t104.112142893334\t30.6520412250356\n" +
            "83\t104.112142893334\t30.6520412250356\n" +
            "84\t104.112142893334\t30.6520412250356\n" +
            "85\t104.112142893334\t30.6520412250356\n" +
            "86\t104.112142893334\t30.6520412250356\n" +
            "87\t104.112142893334\t30.6520412250356\n" +
            "88\t104.112142893334\t30.6520412250356\n" +
            "89\t104.112142893334\t30.6520412250356\n" +
            "90\t104.112142893334\t30.6520412250356\n" +
            "91\t104.112142893334\t30.6520412250356\n" +
            "92\t104.112142893334\t30.6520412250356\n" +
            "93\t104.112142893334\t30.6520412250356\n" +
            "94\t104.112074169446\t30.6521388417434\n" +
            "95\t104.112074169446\t30.6521388417434\n" +
            "96\t104.112074169446\t30.6521388417434\n" +
            "97\t104.112074169446\t30.6521388417434\n" +
            "98\t104.112074169446\t30.6521388417434\n" +
            "99\t104.112074169446\t30.6521388417434\n" +
            "100\t104.1123800107\t30.6521712022582\n" +
            "101\t104.1123800107\t30.6521712022582\n" +
            "102\t104.1123800107\t30.6521712022582\n" +
            "103\t104.112024990234\t30.6523967415079\n" +
            "104\t104.112024990234\t30.6523967415079\n" +
            "105\t104.112024990234\t30.6523967415079\n" +
            "106\t104.112263326821\t30.6523314219969\n" +
            "107\t104.112263326821\t30.6523314219969\n" +
            "108\t104.112263326821\t30.6523314219969\n" +
            "109\t104.112235848259\t30.6535681892474";
}
